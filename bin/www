// #!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('spell_luck-server:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const {commonMySQL, uuidMySQL} = require('../commons/mysql');
const AutoLauncher = require('../commons/AutoLauncher');
const log4js = require('../commons/Log4jsConfig');
const logger = log4js.getLogger('bin.www');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

const httpServer = http.createServer(app);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

const httpsServer = https.createServer({
  key: fs.readFileSync(path.join(__dirname, 'cert/1538876242358.key')),
  cert: fs.readFileSync(path.join(__dirname, 'cert/1538876242358.pem')),
}, app);

/**
 *  Check database connection
 */
uuidMySQL.authenticate().then(() => {
  logger.info("UUID数据库配置正常...");
  return commonMySQL.authenticate().then(() => {
    logger.info("读写数据库配置正常...");
    httpServer.listen(port);
    httpsServer.listen(10443);
    //启动服务侦听程序
    AutoLauncher.launch();
  }).catch(error => {
    throw error;
  });
}).catch(error => {
  // log4js.getLogger('error').error(`${__filename} ${error}`);
  throw error;
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = httpServer.address();
  let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}